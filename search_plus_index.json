{"./":{"url":"./","title":"关于Tang Nano","keywords":"","body":"Tang Nano 文档 --> 什么是 Tang Nano Lichee Tang Nano 是基于高云小蜜蜂系列 GW1N-1 FPGA 的简约型开发板。 板载芯片为 GW1N-LV1QN48C6/I5，搭载了 1152 LUT4 的逻辑资源，1 PLL 和 4 Block 合计 72Kbit SRAM，封装为 QFN48。开发板引出了所有 I/O 接口，适用于小型数字逻辑的设计和实验。 板载 64Mbits PSRAM，为 FPGA 提供了丰富的存储资源。 同时，该开发板具有 RGB接口，能够与 LCD屏、VGA转换器 等外设连接，非常适合于屏幕显示等类型的应用。 板子板载 24MHz 晶振和 USB转JTAG下载器，能够容易的连接电脑进行开发，而不需要外部的调试器和时钟输入。板载的 RGB LED 可用于指示和调试，同时 FPGA IOBANK 分组可调的IO电平使得开发板能够容易的对外部各种不同电平规范的器件接口。 板载资源: GW1N-1 64Mbit QSPI PSRAM RGB LED RGB LCD 40P接口及驱动电路 24MHz晶振 USB调试器，基于Type-C通讯接口 引脚定义 资源下载链接 高云官方下载站 dl 下载站 Tang nano 原理图 "},"get_started/install-the-ide.html":{"url":"get_started/install-the-ide.html","title":"IDE安装","keywords":"","body":"下载 进入官网 http://www.gowinsemi.com.cn/faq.aspx ，可以看到如下图的软件列表，选择适合电脑的系统的版本进行下载 安装 Windows 用户： 双击下载好的 exe 安装文件，选择安装语言、安装位置，鼠标点击下一步就可以完成安装了 完成安装时提示安装的驱动请务必安装 勾选安装驱动后点击完成后，就会进行驱动的安装 Linux 用户： TODO license 现目前有两种方式进行 license 第一种：使用单机版 licence(需要申请 licence) 发送申请邮件到 Support@sipeed.com ，标题为 【Apply Tang Lic】MAC: xxxxxx，内容模板如下 公司名称: 公司网站: 部门: 联系人姓名: 联系人电话: 联系人邮箱: 联系人省份: 计算机MAC地址: license类型:共享型 仅本机 操作系统类型:Windows Linus 代理商推荐:群策电子 致远达科技 算科电子 欣华隆科技 北高智科技 晶立达科技 其他 在打开高云 IDE 的时候，在弹出的 licence 管理中，选择自己本地的 license 的路径，即可 然后需要添加 synplifypro 的 licence 的路径到系统变量，下面只简单的介绍一种添加方法，在 第二种：使用 sipeed 的 licence 服务器联网激活 中，有更详细的介绍 Windows 用户在键盘上按 win+r 键，在弹出的运行窗口输入 cmd，点击确定后会弹出黑色命令行窗口，在里面输入下面命令，path_to_the_file 是你 gowin_Synplifypro.lic 的路径 setx LM_LICENSE_FILE path_to_the_file 第二种：使用 sipeed 的 licence 服务器联网激活 这种方式配置起来简单，不过没有网络的情况下无法使用软件 下载好软件打开后，软件会提示需要 licence，在弹出框中填入服务器地址 45.33.107.56 即可，IDE端口：10559 synopsys 高级功能的激活需要在系统中添加环境变量 LM_LICENSE_FILE=27020@45.33.107.56 Windows 用户在键盘上按 win+r 键，在弹出的运行窗口输入 cmd，点击确定后会弹出黑色命令行窗口，在里面输入下面命令 setx LM_LICENSE_FILE 27020@45.33.107.56 Windows 除了命令行的方式添加，也可以通过 右键电脑->属性->环境变量 ，然后如下图进行添加 Linux 用户需要在 ~/.bashrc 中添加 export LM_LICENSE_FILE 27020@45.33.107.56 进入 IDE 后，点击 Tools 中的 Synplify Pro 随后会弹出界面如下图，这时需要等待一小会，等 licence 初始化完毕就可以使用 使用方法 参考官方文档Gowin云源软件用户指南，第5章 云源软件使用 参考文档 高云软件简介和安装 "},"examples/1_led.html":{"url":"examples/1_led.html","title":"点灯教程","keywords":"","body":"本实例的过程 新建工程 -> 添加源代码文件 -> 添加时序、引脚约束 -> 综合 -> 烧录 在看这篇文档前，请再次确定自己看过Gowin云源软件用户指南，第5章 云源软件使用 本实验的源码地址：https://github.com/sipeed/Tang-Nano-examples/tree/master/example_led Verilog 预备知识 这里只介绍接下来会用到的相关语法，更多的可以参考《Verilog 数字系统设计教程》 Verilog 的基本设计单元是模块，每个 Verilog 程序包括 4个 主要部分：端口定义、I/O说明、内部信号声明和功能定义 模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了 一个模块长成这样 module block (input a, output b); reg [width-1:0] R_1; assign b = a; always @(posedge clk or negedge reset_n) begin // do something end endmodule 模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块接口的定义，声明了端口的方向是输入还是输出 模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型 功能的定义可以通过 assign 和 always块 完成。 assign 是描述组合逻辑最常用的方法之一； always 块机可用于描述组合逻辑，也可描述时序逻辑 引脚使用情况 板载的是一颗三色 RGB 灯，原理图如下 整个程序使用到的引脚分布如下 port I/O pin desc sys_clk input 35 时钟输入脚 sys_rst_n input 15 系统复位脚 led[0] output 16 绿灯 led[1] output 17 蓝灯 led[2] output 18 红灯 程序设计 本系统时钟为 24Mhz，一个机器周期为 1/24M s，也就是说每过 12000000 个时钟周期为 0.5s 在程序中通过 counter 计算 12000000 个时钟周期，实现 0.5s 的等待，等时间到了之后将 counter 置 0，并改变 LED 的颜色 module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [2:0] led // 110 G, 101 R, 011 B ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter 引脚约束 要想让 fpga 实现代码的功能，还需要将代码中涉及的引脚操作约束到 fpga 实际的引脚上 如下图，在左边的工作区点击 process，然后双击 FloorPlanner 在工程中第一次点击，可能会提示说创建文件，点击确定即可 在弹出窗口中，切换到 Package View ，将 Ports 下的端口拖到 fpga 对应的引脚上，保存即可，如下图 综合 在左侧的工作区中，右键 Synthesize 或 Place&Route 时，会有 run 的选项，点击即可 烧录到开发板 有两种选择，一种是烧录到 sram 中，一种是烧录到 flash 中 烧录到 sram 中比较快，但是掉电后 fpga 中就没有固件了；烧录到 flash 中可以在系统掉电后保存之前烧录的固件 烧录是通过 Programer 完成的 双击左侧工作区的 Program Device 就可以打开 Programer 不过在使用 Programer 前需要注意，要在 Synthesize 和 Place&Route 都完成后才能使用 Programer ，否则软件会报错 Bitstream file dose not exists Linux 用户需要注意 Linux 安装包中的编程器适用于 Linux 版本 Red Hat 5.10，如需 Red Hat 6/7 版本的编程器，请到官网上下载安装后，将安装包替换为 Gowin 云源软件安装包中的文件夹“Programmer”。 更改烧录位置 要选择固件烧录的位置，可以在选中芯片的情况下，点击 Edit -> Configure Device 在弹出窗口中选择自己需要烧录到的位置，这里选择的是 flash ，默认烧录位置是 sram 烧录 在选择好烧录位置后，就可以烧录固件了，点击菜单栏的烧录即可 "},"examples/2_lcd.html":{"url":"examples/2_lcd.html","title":"点LCD教程","keywords":"","body":"RGB LCD 示例 先介绍时序 RGB LCD 显示图像的原理和 VGA 类似，都是在计算机内部以数字的方式生成需要显示的图像信息，再通过模数转换的方式，将这些数字的图像信息转变为 RGB 三原色模拟信号，以及行、场同步信号。 下面就介绍 VGA 的时序 上图分别是 VGA 在数据传输中的行同步、场同步时序 从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个同步(sync)信号，数据的传输需要在两个同步信号的脉冲之间完成 每一行的数据包括显示前沿(back porch)、有效数据(active viedo)、显示后沿(front porch) 其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing 这块屏幕的控制时序略有不同，相关参数的设置可以查看规格书 下面提供了 LCD 相关时序的截图 上面一张图是时序中的参数表，下面的图是时序图 从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的 Verilog实现 pll 板载的晶振时钟为 24MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用 pll 产生我们需要的时钟 这里需要使用到 IP Core Generate ，位置在 Tools -> IP Core Generate 双击 PLL ，在弹出窗口 language 选择 Verilog ，CLKIN 为 24MHz ，CLKOUT 为 200MHz，CLKOUTD 要选择 Enable，然后生成时钟为 33.33MHz，Tolerance 选择 0.2% osc 系统的时钟可以使用外部时钟提供，也可以使用 OSC 生成的时钟 同样也是使用 IP Core Generate 找到 OSC 并双击打开进行分频的设置 在帮助页面可以知道，GW1N-1 系列的 fpga 的 OSC 是从 240MHz 进行分频的，所以要产生 24MHz 的时钟，只需要进行 10 的分频 lcd时序产生 localparam V_BackPorch = 16'd6; //0 or 45 localparam V_Pluse = 16'd5; localparam HightPixel = 16'd480; localparam V_FrontPorch= 16'd62; //45 or 0 localparam H_BackPorch = 16'd182; //NOTE: 高像素时钟时，增加这里的延迟，方便K210加入中断 localparam H_Pluse = 16'd1; localparam WidthPixel = 16'd800; localparam H_FrontPorch= 16'd210; localparam PixelForHS = WidthPixel + H_BackPorch + H_FrontPorch; localparam LineForVS = HightPixel + V_BackPorch + V_FrontPorch; 首先是设置时序相关的参数：前沿、后沿、有效像素 关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以 always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount = H_Pluse)&&( PixelCount = V_Pluse )&&( LineCount 这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能 assign LCD_DE = ( ( PixelCount >= H_BackPorch )&& ( PixelCount = V_BackPorch ) && ( LineCount 这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1 assign LCD_R = (PixelCount这段代码用来产生 LCD 的测试数据，产生彩条显示 VGAMod D1 ( .CLK ( CLK_SYS ), .nRST ( nRST ), .PixelClk ( CLK_PIX ), .LCD_DE ( LCD_DEN ), .LCD_HSYNC ( LCD_HYNC ), .LCD_VSYNC ( LCD_SYNC ), .LCD_B ( LCD_B ), .LCD_G ( LCD_G ), .LCD_R ( LCD_R ) ); 最后就是在 TOP 中进行实例化 整个工程可以在 [https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd][https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd] 下载 "}}